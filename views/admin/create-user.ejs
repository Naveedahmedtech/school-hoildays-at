<div class="dashboard-container">
    <div class="dashboard">
      <h2>Create User</h2>
  
      <!-- User Form -->
      <div class="user-form-container">
        <form id="create-user-form">
          <div class="form-group">
            <label for="user-email">Email:</label>
            <input type="email" id="user-email" name="email" placeholder="Enter user email" required />
          </div>
  
          <div class="form-group">
            <label for="user-password">Password:</label>
            <input type="password" id="user-password" name="password" placeholder="Enter user password" required />
          </div>
  
          <div class="form-group">
            <label for="user-role">Role:</label>
            <select id="user-role" name="role" required>
              <option value="EDITOR">Editor</option>
              <!-- <option value="VIEWER">Viewer</option> -->
            </select>
          </div>
  
          <div class="form-group">
            <label for="user-permissions">Permissions:</label>
            <div class="checkbox-group">
              <label>
                <input type="checkbox" name="permissions" value="manage content" /> Manage Content
              </label>
              <label>
                <input type="checkbox" name="permissions" value="manage ads" /> Manage Ads
              </label>
            </div>
          </div>
  
          <button type="submit" class="btn-submit">Create User</button>
        </form>
      </div>
    </div>
  </div>
  
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const createUserForm = document.getElementById("create-user-form");
  
      createUserForm.addEventListener("submit", async (e) => {
        e.preventDefault();
  
        const formData = new FormData(createUserForm);
        const data = {
          email: formData.get("email"),
          password: formData.get("password"),
          role: formData.get("role"),
          permissions: formData.getAll("permissions"),
        };
  
        try {
          const response = await fetch("/api/auth/register", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });
  
          if (response.ok) {
            alert("User created successfully");
            createUserForm.reset();
          } else {
            alert("An error occurred. Please try again.");
          }
        } catch (error) {
          console.error("Error creating user:", error);
          alert("An error occurred. Please try again.");
        }
      });
    });
  </script>
  
  <style>
    .dashboard-container {
      padding: 20px;
      font-family: Arial, sans-serif;
    }
  
    .dashboard h2 {
      margin-bottom: 20px;
    }
  
    .user-form-container {
      border: 1px solid #ddd;
      padding: 20px;
      border-radius: 8px;
      background-color: #f9f9f9;
      margin-bottom: 30px;
    }
  
    .form-group {
      margin-bottom: 15px;
    }
  
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
  
    .form-group input,
    .form-group select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
  
    .checkbox-group {
      display: flex;
      gap: 10px;
    }
  
    .btn-submit {
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
  
    .btn-submit:hover {
      background-color: #0056b3;
    }
  </style>
  